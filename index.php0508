<?php
session_start();
if (!isset($_SESSION['loggedin']) || $_SESSION['loggedin'] !== true) {
    header("Location: login.php");
    exit;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Financial Management System</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --primary-color: #0071ce;
            --primary-hover: #005bb5;
            --secondary-color: #6c757d;
            --secondary-hover: #5a6268;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --light-gray: #f8f9fa;
            --medium-gray: #e9ecef;
            --dark-gray: #343a40;
            --text-color: #495057;
            --border-color: #dee2e6;
            --border-radius: 0.5rem;
            --box-shadow: 0 4px 15px -1px rgba(0, 0, 0, 0.07);
        }

        *, *::before, *::after { box-sizing: border-box; }

        body {
            font-family: 'Lato', sans-serif;
            background-color: var(--light-gray);
            color: var(--text-color);
            margin: 0;
            line-height: 1.6;
        }

        #app-container {
            background-color: #CCCCFF;
            min-height: 100vh;
        }

        .header-container, .top-actions, .card {
            padding-left: 2rem;
            padding-right: 2rem;
        }
        
        h1 { color: var(--dark-gray); text-align: center; font-weight: 700; margin: 0; padding-top: 2rem; }
        h3 { color: var(--dark-gray); font-weight: 700; margin-top: 0; }
        
        .header-container { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            padding-top: 1rem;
            padding-bottom: 1.5rem; 
            border-bottom: 1px solid var(--border-color); 
            margin-bottom: 2rem; 
            gap: 1.5rem;
        }
        .header-container h1 { padding-top: 0; text-align: left; flex-shrink: 0; }
        
        .card { background-color: #fff; padding-top: 1.5rem; padding-bottom: 1.5rem; border-radius: var(--border-radius); border: 1px solid var(--border-color); margin: 0 2rem 1.5rem 2rem; box-shadow: var(--box-shadow); }
        .card.table-card {
             padding-left: 0;
             padding-right: 0;
             border-left: none;
             border-right: none;
             border-radius: 0;
             box-shadow: none;
             border-top: 1px solid var(--border-color);
             border-bottom: 1px solid var(--border-color);
             margin-left: 0;
             margin-right: 0;
        }
        
        #clientForm, #filterContainer { display: flex; flex-wrap: wrap; gap: 1rem; align-items: flex-end; }
        #clientForm input, #clientForm select { flex: 1 1 120px; }
        
        input, select, button, a.btn {
            font-family: 'Lato', sans-serif;
            font-size: 1rem;
            padding: 0.5rem 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(0, 113, 206, 0.2);
        }

        button, .btn { cursor: pointer; border: 1px solid transparent; font-weight: 700; text-align: center; white-space: nowrap; transition: all 0.2s ease-in-out; text-decoration: none; }
        button:hover, .btn:hover { transform: translateY(-1px); box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .btn-primary { background-color: var(--primary-color); color: white; }
        .btn-primary:hover { background-color: var(--primary-hover); }
        .btn-secondary { background-color: var(--secondary-color); color: white; }
        .btn-secondary:hover { background-color: var(--secondary-hover); }
        .btn-success { background-color: var(--success-color); color: white; }
        .btn-success:hover { background-color: #218838; }
        .btn-danger { background-color: var(--danger-color); color: white; }
        .btn-danger:hover { background-color: #c82333; }
        
        .top-actions { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; flex-wrap: wrap; gap: 1rem; }
        .action-buttons-group { display: flex; align-items: center; flex-wrap: wrap; gap: 0.75rem; }

        .btn-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            padding: 0;
            border-radius: 50%;
        }
        .btn-icon svg { width: 20px; height: 20px; fill: white; }
        
        #forex-channel {
            flex-grow: 1;
            height: 30px; 
            background-color: var(--dark-gray);
            border-radius: var(--border-radius);
            overflow: hidden;
            position: relative;
        }
        #forex-channel .forex-list-wrapper { width: 100%; height: 100%; position: absolute; }
        #forex-channel .forex-list {
            list-style: none; padding: 0; margin: 0; position: absolute; display: flex;
            animation: scroll-ticker-horizontal 120s linear infinite;
        }
        #forex-channel .forex-list li {
            padding: 0.25rem 1.5rem; font-size: 0.85rem; display: flex;
            align-items: center; flex-shrink: 0; white-space: nowrap; color: #fff;
        }
        #forex-channel .forex-list .currency-pair { color: var(--warning-color); font-weight: 700; margin-right: 0.75rem; }
        #forex-channel .forex-list .rate { color: var(--success-color); font-weight: 700; }

        @keyframes scroll-ticker-horizontal {
            0% { transform: translateX(0); }
            100% { transform: translateX(-50%); }
        }
        #forex-channel:hover .forex-list { animation-play-state: paused; }
        
        #summaryBar { 
            display: flex; gap: 1rem; font-weight: 700; color: white;
            padding: 0.75rem 1.5rem; border-radius: var(--border-radius);
            margin-left: auto;
            transition: background-color 0.8s ease-in-out;
        }
        #summaryBar.summary-current, #summaryBar.summary-rwf { background-color: var(--primary-color); }
        #summaryBar.summary-usd { background-color: var(--success-color); }
        #summaryBar.summary-eur { background-color: var(--dark-gray); }

        #summaryTitle { font-weight: 700; padding-right: 1rem; border-right: 1px solid rgba(255,255,255,0.5); }
        
        .table-responsive-wrapper { overflow-x: auto; }
        
        #clientTable { width: 100%; border-collapse: collapse; text-align: left; }
        #clientTable th, #clientTable td { padding: 1rem; border-bottom: 1px solid var(--border-color); vertical-align: middle; white-space: nowrap; }
        #clientTable th:first-child, #clientTable td:first-child { padding-left: 2rem; }
        #clientTable th:last-child, #clientTable td:last-child { padding-right: 2rem; }
        #clientTable th { font-weight: 700; background-color: var(--light-gray); color: var(--secondary-color); text-transform: uppercase; font-size: 0.75rem; letter-spacing: 0.75px; border-bottom-width: 2px; border-bottom-color: var(--border-color); }
        #clientTable td { font-family: Arial, sans-serif; }
        #clientTable tbody tr:hover { background-color: #f5f5f5; }
        #clientTable tbody tr:last-child td { border-bottom: none; }
        
        .truncate { display: block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        
        .status-paid, .status-partially-paid, .status-not-paid { font-weight: 700; }
        .status-paid { color: var(--success-color); }
        .status-partially-paid { color: var(--warning-color); }
        .status-not-paid { color: var(--danger-color); }

        .action-buttons-cell { display: flex; justify-content: center; align-items: center; gap: 0.25rem; position: relative; }
        .action-buttons-cell button { padding: 0.3rem; width: 32px; height: 32px; font-size: 0; border-radius: 50%; border: none; cursor: pointer; display: inline-flex; justify-content: center; align-items: center; transition: all 0.2s; }
        .action-buttons-cell button:hover { transform: scale(1.15); box-shadow: 0 2px 8px rgba(0,0,0,0.2); }
        .action-buttons-cell button svg { width: 16px; height: 16px; fill: white; }
        .editBtn { background-color: var(--warning-color); }
        .deleteBtn { background-color: var(--danger-color); }
        .printBtn { background-color: var(--primary-color); }
        .saveBtn { background-color: var(--success-color); width: auto !important; height: auto !important; padding: 0.3rem 0.6rem !important; font-size: 0.8rem !important; border-radius: var(--border-radius) !important; }
        .cancelBtn { background-color: var(--secondary-color); width: auto !important; height: auto !important; padding: 0.3rem 0.6rem !important; font-size: 0.8rem !important; border-radius: var(--border-radius) !important; }

        .print-dropdown { display: none; position: absolute; top: 100%; right: 0; background-color: white; border-radius: var(--border-radius); box-shadow: var(--box-shadow); border: 1px solid var(--border-color); z-index: 10; min-width: 120px; padding: 0.5rem 0; }
        .print-dropdown a { display: block; padding: 0.5rem 1rem; text-decoration: none; color: var(--dark-gray); font-size: 0.9rem; }
        .print-dropdown a:hover { background-color: var(--light-gray); }
        
        .modal { display: none; position: fixed; z-index: 1000; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; }
        .modal[aria-hidden="false"] { display: flex; animation: fadeIn 0.3s ease; }
        @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
        .modal-content { width: 500px; }
        #confirmModal .modal-content, #tinModal .modal-content { max-width: 450px; text-align: center; }
        #confirmModal-buttons { display: flex; justify-content: center; gap: 1rem; margin-top: 1.5rem; }
        .tin-error-message { color: var(--danger-color); font-size: 0.875rem; text-align: left; margin-top: -0.5rem; margin-bottom: 1rem; height: 1em; }
        
        #notification-toast { position: fixed; bottom: 20px; right: 20px; color: white; padding: 1rem 1.5rem; border-radius: var(--border-radius); box-shadow: 0 5px 15px rgba(0,0,0,0.2); z-index: 10002; transform: translateY(150%); opacity: 0; transition: all 0.4s ease-in-out; }
        #notification-toast.show { transform: translateY(0); opacity: 1; }
        #notification-toast.success { background-color: var(--success-color); }
        #notification-toast.error { background-color: var(--danger-color); }

        #loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.7); z-index: 10000; display: none; align-items: center; justify-content: center; }
        #loading-overlay::after { content: ''; display: block; width: 40px; height: 40px; border-radius: 50%; border: 4px solid var(--medium-gray); border-top-color: var(--primary-color); animation: spin 1s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
    </style>
</head>
<body>

<script>
(function() {
    const LOGOUT_TIME = 5 * 60 * 1000; const WARNING_TIME = 4 * 60 * 1000;
    let logoutTimer, warningTimer;
    const logoutUser = () => { window.location.href = 'logout.php'; };
    const showWarning = () => { if (document.getElementById('inactivity-warning')) return; const warningDiv = document.createElement('div'); warningDiv.id = 'inactivity-warning'; warningDiv.innerHTML = 'You will be logged out in 1 minute due to inactivity. '; Object.assign(warningDiv.style, { position: 'fixed', top: '20px', left: '50%', transform: 'translateX(-50%)', padding: '15px 25px', backgroundColor: '#dc3545', color: 'white', borderRadius: '5px', zIndex: '9999', boxShadow: '0 4px 8px rgba(0,0,0,0.2)' }); const stayButton = document.createElement('button'); stayButton.innerText = 'Stay Logged In'; Object.assign(stayButton.style, { marginLeft: '15px', padding: '5px 10px', cursor: 'pointer', border: '1px solid white', backgroundColor: '#0071ce', color: 'white' }); stayButton.onclick = () => resetTimers(); warningDiv.appendChild(stayButton); document.body.appendChild(warningDiv); };
    const resetTimers = () => { clearTimeout(warningTimer); clearTimeout(logoutTimer); const warningDiv = document.getElementById('inactivity-warning'); if (warningDiv) warningDiv.remove(); warningTimer = setTimeout(showWarning, WARNING_TIME); logoutTimer = setTimeout(logoutUser, LOGOUT_TIME); };
    ['click', 'mousemove', 'keydown', 'scroll'].forEach(event => document.addEventListener(event, resetTimers, true));
    resetTimers();
})();
</script>

<div id="app-container">
    <div class="header-container">
        <h1>Financial Dashboard</h1>
        <div id="forex-channel" title="Live FOREX Rates (Base: USD)">
            <div class="forex-list-wrapper">
                <ul class="forex-list"><li>Loading Rates...</li></ul>
            </div>
        </div>
        <a href="logout.php" class="btn btn-secondary">Logout</a>
    </div>

    <div class="top-actions">
        <div class="action-buttons-group">
            <button id="showAddFormBtn" class="btn btn-primary">Add New Client</button>
            <button id="importExcelBtn" class="btn btn-secondary btn-icon" title="Import from Excel"><svg fill="currentColor" viewBox="0 0 24 24"><path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,16V19H11.5V16H8.5V14H11.5V11H13.5V14H16.5V16H13.5M13,9V3.5L18.5,9H13Z" /></svg></button>
            <input type="file" id="importExcelFile" style="display: none;" accept=".xlsx, .xls">
            <button id="downloadExcelBtn" class="btn btn-secondary btn-icon" title="Download as Excel"><svg fill="currentColor" viewBox="0 0 24 24"><path d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z" /></svg></button>
            <button id="printBtn" class="btn btn-secondary btn-icon" title="Print Table"><svg fill="currentColor" viewBox="0 0 24 24"><path d="M19,8H5A3,3 0 0,0 2,11V17H6V21H18V17H22V11A3,3 0 0,0 19,8M16,19H8V14H16M19,12A1,1 0 0,1 20,13A1,1 0 0,1 19,14A1,1 0 0,1 18,13A1,1 0 0,1 19,12M18,3H6V7H18V3Z" /></svg></button>
            <a href="https://duns1.fezalogistics.com/wp-admin" target="_blank" class="btn btn-secondary btn-icon" title="Go to Accounting"><svg fill="currentColor" viewBox="0 0 24 24"><path d="M4,22H2V2H4V4H10V2H12V4H20V2H22V22H20V20H12V22H10V20H4V22M18,18V6H6V18H18M8,10H10V8H8V10M12,10H14V8H12V10M16,10H18V8H16V10M8,14H10V12H8V14M12,14H14V12H12V14M16,14H18V12H16V14Z" /></svg></a>
            <button id="viewAllBtn" class="btn btn-secondary">View All</button>
        </div>
        <div id="summaryBar">
            <span id="summaryTitle">Current View:</span>
            <span>Total: <span id="totalAmount">0.00</span></span>
            <span>Due: <span id="totalDue">0.00</span></span>
            <span>Paid: <span id="totalPaid">0.00</span></span>
        </div>
    </div>
    
    <div id="addClientCard" class="card" style="display: none;">
        <h3>Add New Client</h3>
        <form id="clientForm">
             <input type="text" name="reg_no" placeholder="Registration Number" required>
            <input type="text" name="client_name" placeholder="Client Name" required>
            <input type="date" name="date" required>
            <input type="text" name="phone_number" placeholder="Phone Number" required>
            <input type="text" name="service" placeholder="Service" required>
            <input type="number" name="amount" placeholder="Amount" step="0.01" required>
            <select name="currency" required><option value="" disabled selected>Currency</option><option value="EUR">EUR</option><option value="USD">USD</option><option value="RWF">RWF</option></select>
            <input type="number" name="paid_amount" placeholder="Paid Amount" step="0.01" required>
            <input type="number" name="due_amount" placeholder="Due Amount" readonly>
            <button type="submit" class="btn btn-primary">Save Client</button>
        </form>
    </div>

    <div class="card">
        <div id="filterContainer">
            <label for="search">Search:</label>
            <input type="text" id="search" placeholder="Reg No, Client Name, or Phone">
            <label for="filterDateFrom">Date:</label>
            <input type="date" id="filterDateFrom"><span>to</span><input type="date" id="filterDateTo">
            <label for="filterPaidStatus">Status:</label>
            <select id="filterPaidStatus"><option value="">All</option><option value="PAID">Paid</option><option value="PARTIALLY PAID">Partially Paid</option><option value="NOT PAID">Not Paid</option></select>
            <label for="filterCurrency">Currency:</label>
            <select id="filterCurrency"><option value="">All</option><option value="RWF">RWF</option><option value="USD">USD</option><option value="EUR">EUR</option></select>
        </div>
    </div>
    
    <div class="card table-card">
        <div class="table-responsive-wrapper">
            <table id="clientTable">
                <thead>
                    <tr>
                        <th>Serial No</th><th>Reg No</th><th>Client Name</th><th>Date</th>
                        <th>Phone Number</th><th>Service</th><th>Amount</th>
                        <th>Currency</th><th>Paid Amount</th><th>Due Amount</th>
                        <th>Status</th><th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>
        
<div id="tinModal" class="modal" aria-hidden="true">
    <div class="modal-content card" style="width: 400px; margin: 0;">
        <h3 id="tinModal-title">Enter Client TIN</h3>
        <form id="tinForm" novalidate>
            <input type="hidden" id="tin-clientId">
            <input type="hidden" id="tin-docType">
            <div style="text-align:left; margin-bottom: 1rem;">
                <label for="tin-number" style="font-weight:700;">TIN Number</label>
                <input type="text" id="tin-number" placeholder="Enter 9 digits" required>
                <p class="tin-error-message"></p>
            </div>
            <button type="submit" class="btn btn-primary">Generate & Print</button>
            <button type="button" id="closeTinModalBtn" class="btn btn-secondary">Cancel</button>
        </form>
    </div>
</div>

<div id="confirmModal" class="modal" aria-hidden="true">
    <div class="modal-content card" style="margin: 0;">
        <h3 id="confirmModal-title">Confirm Deletion</h3>
        <p id="confirmModal-text">Are you sure you want to delete this client? This action cannot be undone.</p>
        <div id="confirmModal-buttons">
            <button id="confirmModal-cancel" class="btn btn-secondary">Cancel</button>
            <button id="confirmModal-confirm" class="btn btn-danger">Confirm Delete</button>
        </div>
    </div>
</div>

<div id="notification-toast"></div>
<div id="loading-overlay"></div>

<script>
$(document).ready(function() {

    const showLoading = (show) => $('#loading-overlay').css('display', show ? 'flex' : 'none');
    
    let toastTimeout;
    const showToast = (message, type = 'success') => {
        const toast = $('#notification-toast');
        toast.text(message).removeClass('success error').addClass(type).addClass('show');
        clearTimeout(toastTimeout);
        toastTimeout = setTimeout(() => toast.removeClass('show'), 4000);
    };

    const showConfirm = (callback) => {
        const modal = $('#confirmModal');
        modal.attr('aria-hidden', 'false');
        $('#confirmModal-confirm').off('click').on('click', function() {
            modal.attr('aria-hidden', 'true');
            callback();
        });
        $('#confirmModal-cancel').off('click').on('click', function() {
            modal.attr('aria-hidden', 'true');
        });
    };

    function fetchForexRates() {
        const apiUrl = `https://open.er-api.com/v6/latest/USD`;
        $.ajax({
            url: apiUrl, type: 'GET', dataType: 'json',
            success: function(data) {
                if (data.result !== 'success' || !data.rates) { $('#forex-channel .forex-list').html('<li>Data unavailable.</li>'); return; }
                const rates = data.rates;
                const forexList = $('#forex-channel .forex-list');
                forexList.empty();
                const importantCurrencies = ['RWF', 'EUR', 'GBP', 'KES', 'UGX', 'TZS', 'JPY', 'CAD', 'AUD', 'CNY'];
                importantCurrencies.forEach(currency => {
                    if (rates[currency]) {
                        const rate = rates[currency].toFixed(4);
                        forexList.append(`<li><span class="currency-pair">USD/${currency}</span> <span class="rate">${rate}</span></li>`);
                    }
                });
                if(forexList.children().length > 0) {
                    forexList.html(forexList.html() + forexList.html());
                }
            },
            error: function() { $('#forex-channel .forex-list').html('<li>Could not load rates.</li>'); }
        });
    }

    let currencySummaries = {}, summaryState = 3, summaryInterval;
    function fetchCurrencySummaries() {
        $.ajax({
            url: 'fetch_currency_summary.php', type: 'GET', dataType: 'json',
            success: function(data) { currencySummaries = data; startSummaryCycler(); },
            error: function() { console.error("Could not fetch currency summaries."); startSummaryCycler(); }
        });
    }
    
    function updateDynamicSummary() {
        summaryState = (summaryState + 1) % 4;
        const summaryBar = $('#summaryBar');
        summaryBar.removeClass('summary-rwf summary-usd summary-eur summary-current');
        let title, totals, colorClass;
        const emptyTotals = { total_amount: 0, total_due: 0, total_paid: 0 };
        switch (summaryState) {
            case 0: title = 'RWF Totals:'; totals = currencySummaries.RWF || emptyTotals; colorClass = 'summary-rwf'; break;
            case 1: title = 'USD Totals:'; totals = currencySummaries.USD || emptyTotals; colorClass = 'summary-usd'; break;
            case 2: title = 'EUR Totals:'; totals = currencySummaries.EUR || emptyTotals; colorClass = 'summary-eur'; break;
            default: title = 'Current View:'; updateSummary(); colorClass = 'summary-current'; break;
        }
        if (summaryState < 3) {
            $('#totalAmount').text(parseFloat(totals.total_amount || 0).toFixed(2));
            $('#totalDue').text(parseFloat(totals.total_due || 0).toFixed(2));
            $('#totalPaid').text(parseFloat(totals.total_paid || 0).toFixed(2));
        }
        $('#summaryTitle').text(title);
        summaryBar.addClass(colorClass);
    }
    function startSummaryCycler() { clearInterval(summaryInterval); updateDynamicSummary(); summaryInterval = setInterval(updateDynamicSummary, 10000); }

    function loadData() {
        showLoading(true);
        $.ajax({
            url: 'fetch_clients.php', type: 'GET', dataType: 'json',
            data: { searchQuery: $('#search').val(), filterDateFrom: $('#filterDateFrom').val(), filterDateTo: $('#filterDateTo').val(), filterPaidStatus: $('#filterPaidStatus').val(), filterCurrency: $('#filterCurrency').val() },
            success: function(clients) {
                cancelEditing();
                $('#clientTable tbody').empty();
                if(Array.isArray(clients)) { clients.forEach((client, index) => addRowToTable(client, index + 1)); }
                summaryState = 2;
                startSummaryCycler();
            },
            error: function() { showToast('Failed to load data.', 'error'); },
            complete: function() { showLoading(false); }
        });
    }

    function updateSummary() {
        let totalAmount = 0, totalDue = 0, totalPaid = 0;
        $('#clientTable tbody tr').each(function() {
            totalAmount += parseFloat($(this).find('td').eq(6).text()) || 0;
            totalPaid += parseFloat($(this).find('td').eq(8).text()) || 0;
            totalDue += parseFloat($(this).find('td').eq(9).text()) || 0;
        });
        $('#totalAmount').text(totalAmount.toFixed(2));
        $('#totalDue').text(totalDue.toFixed(2));
        $('#totalPaid').text(totalPaid.toFixed(2));
        $('#summaryTitle').text('Current View:');
        $('#summaryBar').removeClass('summary-rwf summary-usd summary-eur').addClass('summary-current');
    }

    function addRowToTable(client, serialNo) {
        const status = client.status || 'N/A';
        const statusClass = status.toLowerCase().replace(/ /g, '-');
        const row = `<tr data-id="${client.id}"><td>${serialNo}</td><td title="${client.reg_no}"><div class="truncate" style="max-width: 10ch;">${client.reg_no}</div></td><td title="${client.client_name}"><div class="truncate" style="max-width: 30ch;">${client.client_name}</div></td><td>${client.date}</td><td>${client.phone_number}</td><td title="${client.service}"><div class="truncate" style="max-width: 25ch;">${client.service}</div></td><td>${parseFloat(client.amount).toFixed(2)}</td><td>${client.currency}</td><td>${parseFloat(client.paid_amount).toFixed(2)}</td><td>${parseFloat(client.due_amount).toFixed(2)}</td><td class="status-${statusClass}">${status}</td><td class="action-buttons-cell"><button class="editBtn" title="Edit Row"><svg fill="currentColor" viewBox="0 0 20 20"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"></path><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd"></path></svg></button><button class="deleteBtn" title="Delete Row"><svg fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg></button><button class="printBtn" title="Print Menu"><svg fill="currentColor" viewBox="0 0 20 20"><path d="M6 4a2 2 0 012-2h4a2 2 0 012 2v2a2 2 0 01-2 2H8a2 2 0 01-2-2V4zm8 0V6H6V4a1 1 0 011-1h4a1 1 0 011 1zM3 8a2 2 0 012-2h10a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm2 0v6h10V8H5zM12 12a1 1 0 100-2 1 1 0 000 2z"/></svg></button><div class="print-dropdown"><a href="#" class="print-link" data-type="invoice">Invoice</a><a href="#" class="print-link" data-type="receipt">Receipt</a></div></td></tr>`;
        $('#clientTable tbody').append(row);
    }

    function cancelEditing() {
        const editingRow = $('tr.editing-row');
        if (editingRow.length) {
            const originalData = editingRow.data('originalData');
            editingRow.find('td').each(function(index) { if (index > 0 && !$(this).hasClass('action-buttons-cell')) { $(this).html(originalData[index-1]); } });
            editingRow.find('.action-buttons-cell').html('<button class="editBtn" title="Edit Row"><svg fill="currentColor" viewBox="0 0 20 20"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"/><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd"/></svg></button> <button class="deleteBtn" title="Delete Row"><svg fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/></svg></button><button class="printBtn" title="Print Menu"><svg fill="currentColor" viewBox="0 0 20 20"><path d="M6 4a2 2 0 012-2h4a2 2 0 012 2v2a2 2 0 01-2 2H8a2 2 0 01-2-2V4zm8 0V6H6V4a1 1 0 011-1h4a1 1 0 011 1zM3 8a2 2 0 012-2h10a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm2 0v6h10V8H5zM12 12a1 1 0 100-2 1 1 0 000 2z"/></svg></button><div class="print-dropdown"><a href="#" class="print-link" data-type="invoice">Invoice</a><a href="#" class="print-link" data-type="receipt">Receipt</a></div>');
            editingRow.removeClass('editing-row');
        }
    }
    
    $('#showAddFormBtn').on('click', function() { $('#addClientCard').slideToggle(); });
    $('#clientForm').on('submit', function(event) { event.preventDefault(); showLoading(true); $.ajax({ url: 'insert_client.php', type: 'POST', data: $(this).serialize(), dataType: 'json', success: function(response) { if (response.success) { loadData(); $('#clientForm')[0].reset(); $('#addClientCard').slideUp(); showToast('Client added successfully!', 'success'); } else { showToast(response.error || 'Failed to add client.', 'error'); } }, error: () => showToast('Server error while adding.', 'error'), complete: () => showLoading(false) }); });
    $(document).on('click', '.editBtn', function() { cancelEditing(); const row = $(this).closest('tr'); row.addClass('editing-row'); let originalData = []; row.find('td').each(function(index) { if(index > 0 && !$(this).hasClass('action-buttons-cell')) { const cell = $(this); const currentValue = cell.find('.truncate').length ? cell.find('.truncate').text() : cell.text(); originalData.push(cell.html()); let input; switch(index) { case 1: input = `<input type="text" name="reg_no" value="${currentValue}">`; break; case 2: input = `<input type="text" name="client_name" value="${currentValue}">`; break; case 3: input = `<input type="date" name="date" value="${currentValue}">`; break; case 4: input = `<input type="text" name="phone_number" value="${currentValue}">`; break; case 5: input = `<input type="text" name="service" value="${currentValue}">`; break; case 6: input = `<input type="number" name="amount" step="0.01" value="${currentValue}">`; break; case 7: input = `<select name="currency"><option selected>${currentValue}</option><option value="RWF">RWF</option><option value="USD">USD</option><option value="EUR">EUR</option></select>`; break; case 8: input = `<input type="number" name="paid_amount" step="0.01" value="${currentValue}">`; break; case 9: input = `<input type="number" name="due_amount" value="${currentValue}" readonly>`; break; default: input = `<span>${currentValue}</span>`; break; } cell.html(input); } }); row.data('originalData', originalData); row.find('.action-buttons-cell').html('<button class="saveBtn">Save</button> <button class="cancelBtn">Cancel</button>'); });
    $(document).on('click', '.cancelBtn', cancelEditing);
    $(document).on('click', '.saveBtn', function() { const row = $(this).closest('tr'); const clientId = row.data('id'); let formData = { id: clientId }; row.find('input, select').each(function() { formData[$(this).attr('name')] = $(this).val(); }); const amount = parseFloat(formData['amount']) || 0; const paid_amount = parseFloat(formData['paid_amount']) || 0; formData['due_amount'] = (amount - paid_amount).toFixed(2); showLoading(true); $.ajax({ url: 'update_client.php', type: 'POST', data: formData, dataType: 'json', success: function(response) { if(response.success) { showToast('Client updated!', 'success'); loadData(); } else { showToast(response.error || 'Update failed.', 'error'); cancelEditing(); } }, error: () => { showToast('Server error during update.', 'error'); cancelEditing(); }, complete: () => showLoading(false) }); });
    $(document).on('click', '.deleteBtn', function() { const clientId = $(this).closest('tr').data('id'); showConfirm(() => { showLoading(true); $.ajax({ url: 'delete_client.php', type: 'POST', data: { id: clientId }, dataType: 'json', success: function(response) { if (response.success) { loadData(); showToast('Client deleted.', 'success'); }  else { showToast(response.error || 'Could not delete.', 'error'); } }, error: () => showToast('Server error while deleting.', 'error'), complete: () => showLoading(false) }); }); });
    let debounceTimer; $('#search').on('keyup', function() { clearTimeout(debounceTimer); const query = $(this).val(); if (query.length === 0 || query.length >= 3) { debounceTimer = setTimeout(() => { loadData(); }, 400); } });
    $('#filterDateFrom, #filterDateTo, #filterPaidStatus, #filterCurrency').on('change', loadData);
    $('#viewAllBtn').on('click', function() { $('#search, #filterDateFrom, #filterDateTo').val(''); $('#filterPaidStatus, #filterCurrency').val(''); loadData(); });
    $('#printBtn').on('click', function() { const tableToPrint = $('#clientTable').clone(); tableToPrint.find('th:last-child, td:last-child').remove(); const printWindow = window.open('', '', 'height=800,width=1200'); printWindow.document.write('<html><head><title>Print Client Data</title><style>body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse}th,td{border:1px solid #ccc;padding:8px;text-align:left}th{background-color:#f2f2f2}</style></head><body><h1>Client Financial Data</h1>'); printWindow.document.write(tableToPrint.prop('outerHTML')); printWindow.document.write('</body></html>'); printWindow.document.close(); printWindow.focus(); printWindow.print(); printWindow.close(); });
    $('#downloadExcelBtn').on('click', function() { const table = document.getElementById("clientTable"); const tableClone = table.cloneNode(true); const rows = tableClone.getElementsByTagName('tr'); for (let i = 0; i < rows.length; i++) { if(rows[i].cells.length > 1) { rows[i].deleteCell(-1); } } const wb = XLSX.utils.table_to_book(tableClone, { sheet: "Clients" }); XLSX.writeFile(wb, "Feza_Logistics_Clients.xlsx"); });
    $('#importExcelBtn').on('click', function() { $('#importExcelFile').click(); });
    $('#importExcelFile').on('change', function(event) { const file = event.target.files[0]; if (!file) return; showLoading(true); const reader = new FileReader(); reader.onload = function(e) { const data = new Uint8Array(e.target.result); const workbook = XLSX.read(data, {type: 'array', cellDates: true}); const firstSheet = workbook.Sheets[workbook.SheetNames[0]]; const jsonData = XLSX.utils.sheet_to_json(firstSheet); $.ajax({ url: 'batch_insert.php', type: 'POST', contentType: 'application/json', data: JSON.stringify(jsonData), success: function(response) { showToast(response.message || 'Import processed!', 'success'); loadData(); }, error: function(jqXHR) { const errorMsg = jqXHR.responseJSON ? jqXHR.responseJSON.error : 'Unknown server error.'; showToast('Import failed: ' + errorMsg, 'error'); }, complete: function() { showLoading(false); $('#importExcelFile').val(''); } }); }; reader.readAsArrayBuffer(file); });
    $(document).on('click', '.printBtn', function(e) { e.stopPropagation(); $('.print-dropdown').not($(this).next('.print-dropdown')).hide(); $(this).next('.print-dropdown').toggle(); });
    $(document).on('click', function() { $('.print-dropdown').hide(); });
    $(document).on('click', '.print-link', function(e) { e.preventDefault(); const docType = $(this).data('type'); const clientId = $(this).closest('tr').data('id'); $('#tin-clientId').val(clientId); $('#tin-docType').val(docType); $('#tinModal-title').text(`Enter TIN for ${docType.charAt(0).toUpperCase() + docType.slice(1)}`); $('#tinModal').attr('aria-hidden', 'false'); });
    $('#tinForm').on('submit', function(e) { e.preventDefault(); const clientId = $('#tin-clientId').val(); const docType = $('#tin-docType').val(); const tinNumber = $('#tin-number').val(); const tinRegex = /^\d{9}$/; const tinError = $('.tin-error-message'); if (tinRegex.test(tinNumber)) { tinError.text(''); const url = `print_document.php?id=${clientId}&type=${docType}&tin=${encodeURIComponent(tinNumber)}`; window.open(url, '_blank'); $('#tinModal').attr('aria-hidden', 'true'); $('#tin-number').val(''); } else { tinError.text('Wrong TIN. Please enter exactly 9 digits.'); } });
    $('#closeTinModalBtn').on('click', function() { $('#tinModal').attr('aria-hidden', 'true'); $('.tin-error-message').text(''); $('#tin-number').val(''); });
    
    // Initial Load
    loadData();
    fetchCurrencySummaries();
    fetchForexRates();
    setInterval(fetchForexRates, 1000 * 60 * 30);
});
</script>

</body>
</html>